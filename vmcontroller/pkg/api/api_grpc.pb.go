// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: pkg/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMController_ExecuteCommand_FullMethodName = "/api.VMController/ExecuteCommand"
)

// VMControllerClient is the client API for VMController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service that the controller exposes.
type VMControllerClient interface {
	ExecuteCommand(ctx context.Context, in *VMCommandRequest, opts ...grpc.CallOption) (*VMCommandResponse, error)
}

type vMControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMControllerClient(cc grpc.ClientConnInterface) VMControllerClient {
	return &vMControllerClient{cc}
}

func (c *vMControllerClient) ExecuteCommand(ctx context.Context, in *VMCommandRequest, opts ...grpc.CallOption) (*VMCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMCommandResponse)
	err := c.cc.Invoke(ctx, VMController_ExecuteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMControllerServer is the server API for VMController service.
// All implementations must embed UnimplementedVMControllerServer
// for forward compatibility.
//
// Service that the controller exposes.
type VMControllerServer interface {
	ExecuteCommand(context.Context, *VMCommandRequest) (*VMCommandResponse, error)
	mustEmbedUnimplementedVMControllerServer()
}

// UnimplementedVMControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMControllerServer struct{}

func (UnimplementedVMControllerServer) ExecuteCommand(context.Context, *VMCommandRequest) (*VMCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedVMControllerServer) mustEmbedUnimplementedVMControllerServer() {}
func (UnimplementedVMControllerServer) testEmbeddedByValue()                      {}

// UnsafeVMControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMControllerServer will
// result in compilation errors.
type UnsafeVMControllerServer interface {
	mustEmbedUnimplementedVMControllerServer()
}

func RegisterVMControllerServer(s grpc.ServiceRegistrar, srv VMControllerServer) {
	// If the following call pancis, it indicates UnimplementedVMControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMController_ServiceDesc, srv)
}

func _VMController_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMControllerServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMController_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMControllerServer).ExecuteCommand(ctx, req.(*VMCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMController_ServiceDesc is the grpc.ServiceDesc for VMController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VMController",
	HandlerType: (*VMControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _VMController_ExecuteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}

const (
	AgentService_ReportResources_FullMethodName     = "/api.AgentService/ReportResources"
	AgentService_ExecuteAgentCommand_FullMethodName = "/api.AgentService/ExecuteAgentCommand"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for agents to report resources and execute commands.
type AgentServiceClient interface {
	ReportResources(ctx context.Context, in *NodeResources, opts ...grpc.CallOption) (*VMCommandResponse, error)
	ExecuteAgentCommand(ctx context.Context, in *VMCommandRequest, opts ...grpc.CallOption) (*VMCommandResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) ReportResources(ctx context.Context, in *NodeResources, opts ...grpc.CallOption) (*VMCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMCommandResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ExecuteAgentCommand(ctx context.Context, in *VMCommandRequest, opts ...grpc.CallOption) (*VMCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMCommandResponse)
	err := c.cc.Invoke(ctx, AgentService_ExecuteAgentCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// Service for agents to report resources and execute commands.
type AgentServiceServer interface {
	ReportResources(context.Context, *NodeResources) (*VMCommandResponse, error)
	ExecuteAgentCommand(context.Context, *VMCommandRequest) (*VMCommandResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) ReportResources(context.Context, *NodeResources) (*VMCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResources not implemented")
}
func (UnimplementedAgentServiceServer) ExecuteAgentCommand(context.Context, *VMCommandRequest) (*VMCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAgentCommand not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_ReportResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportResources(ctx, req.(*NodeResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ExecuteAgentCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ExecuteAgentCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ExecuteAgentCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ExecuteAgentCommand(ctx, req.(*VMCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportResources",
			Handler:    _AgentService_ReportResources_Handler,
		},
		{
			MethodName: "ExecuteAgentCommand",
			Handler:    _AgentService_ExecuteAgentCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/api.proto",
}
